<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>树莓派ROS小车的搭建</title>
      <link href="/year/11/01/%E6%A0%91%E8%8E%93%E6%B4%BEROS%E5%B0%8F%E8%BD%A6/"/>
      <url>/year/11/01/%E6%A0%91%E8%8E%93%E6%B4%BEROS%E5%B0%8F%E8%BD%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="树莓派ROS小车"><a href="#树莓派ROS小车" class="headerlink" title="树莓派ROS小车"></a>树莓派ROS小车</h1><h2 id="安装树莓派相关ROS环境"><a href="#安装树莓派相关ROS环境" class="headerlink" title="安装树莓派相关ROS环境"></a>安装树莓派相关ROS环境</h2><h3 id="安装ubuntu-mate系统"><a href="#安装ubuntu-mate系统" class="headerlink" title="安装ubuntu mate系统"></a>安装ubuntu mate系统</h3><h4 id="下载ubuntu-mate20-04镜像"><a href="#下载ubuntu-mate20-04镜像" class="headerlink" title="下载ubuntu mate20.04镜像"></a>下载ubuntu mate20.04镜像</h4><ul><li><p>百度搜索ubuntu mate，进入download界面，拉倒最底下</p></li><li><p>选择Browse archive and previous device ports <a href="https://releases.ubuntu-mate.org/">https://releases.ubuntu-mate.org/</a></p></li></ul><p><img src="/home/chonqin/.config/Typora/typora-user-images/image-20251023165941768.png" alt="image-20251023165941768"></p><p><img src="/home/chonqin/.config/Typora/typora-user-images/image-20251023170041982.png" alt="image-20251023170041982"></p><ul><li>随后进入20.04 arm64 ，下载<a href="https://releases.ubuntu-mate.org/20.04/arm64/ubuntu-mate-20.04.1-desktop-arm64+raspi.img.xz">https://releases.ubuntu-mate.org/20.04/arm64/ubuntu-mate-20.04.1-desktop-arm64+raspi.img.xz</a></li></ul><p><img src="/home/chonqin/.config/Typora/typora-user-images/image-20251023170222972.png" alt="image-20251023170222972"></p><h4 id="制作并烧录到SD卡里"><a href="#制作并烧录到SD卡里" class="headerlink" title="制作并烧录到SD卡里"></a>制作并烧录到SD卡里</h4><ul><li>前往树莓派官网下载他的烧录工具</li></ul><p><img src="/home/chonqin/.config/Typora/typora-user-images/image-20251023170412766.png" alt="image-20251023170412766"></p><ul><li><p>第一个选择烧录的设备型号（树莓派4B），第二个选择自己下载的ubuntu mate ，第三个选择烧录的位置，选择你的sd卡。随后点击烧录即可</p><p>  <img src="/home/chonqin/.config/Typora/typora-user-images/image-20251023170559247.png" alt="image-20251023170559247"></p></li><li><p>可以提前配置一下用户名、网络啥的。</p></li></ul><h4 id="进入树莓派ubuntu-mate系统"><a href="#进入树莓派ubuntu-mate系统" class="headerlink" title="进入树莓派ubuntu mate系统"></a>进入树莓派ubuntu mate系统</h4><p>把sd卡插入树莓派，随后插电开机。使用micro HDMI线连上显示器。</p><p>进行基本的配置，设置用户名密码、网络连接。</p><p>更换清华源，不再赘述。</p><p>安装network工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install net-tools</span><br></pre></td></tr></table></figure><p>查看树莓派的ip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p><img src="/home/chonqin/.config/Typora/typora-user-images/image-20251023171300357.png" alt="image-20251023171300357"></p><p>将树莓派和主机放在同一局域网，测试ping通，在主机终端输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 10.43.234.55(树莓派ip)</span><br></pre></td></tr></table></figure><p><img src="/home/chonqin/.config/Typora/typora-user-images/image-20251023171505520.png" alt="image-20251023171505520"></p><p>这样就是ping通了，可以使用远程连接。</p><h3 id="树莓派配置远程连接"><a href="#树莓派配置远程连接" class="headerlink" title="树莓派配置远程连接"></a>树莓派配置远程连接</h3><h4 id="ssh连接"><a href="#ssh连接" class="headerlink" title="ssh连接"></a>ssh连接</h4><p><strong>直接终端连接</strong>：</p><p>在ubuntu主机里，下载remmina连接工具。</p><p>ping通了之后，终端可以直接连，但是使用remmina工具更方便。</p><p>终端输入ssh &lt;树莓派用户名&gt;@&lt;树莓派IP地址&gt;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shh pi@10.43.234.55</span><br></pre></td></tr></table></figure><p><img src="/home/chonqin/.config/Typora/typora-user-images/image-20251023171926032.png" alt="image-20251023171926032"></p><p>输入树莓派密码后就可以连接上了。</p><p><strong>利于remmina</strong>：</p><p>这是linux下一个软件能储存信息，方便连接：</p><p>点击左上角加好，再输入ip 密码啥的就可以连接了。</p><p><img src="/assets/image-20251025164851196.png" alt="image-20251025164851196"></p><h4 id="利用TigerVNC进行远程桌面连接"><a href="#利用TigerVNC进行远程桌面连接" class="headerlink" title="利用TigerVNC进行远程桌面连接"></a>利用TigerVNC进行远程桌面连接</h4><p>先给ubuntu mate换个桌面，自带的mate桌面有点卡。</p><p>更换xfce4桌面并卸载自带mate桌面不赘述了（自行搜索）。</p><p><img src="/assets/image-20251025165110719.png" alt="image-20251025165110719"></p><h3 id="个人IP"><a href="#个人IP" class="headerlink" title="个人IP"></a>个人IP</h3><p><code>校园网环境下</code>：</p><p>​PC有线连接校园网IP：10.43.173.38</p><p>​树莓派无线连接宿舍校园网IP：10.43.234.55</p><p><code>609wifi环境下</code>:</p><p>​PC有线连接校园网IP：10.43.173.38</p><p>​树莓派无线连接宿舍校园网IP：10.43.234.55</p><h3 id="sync同步文件的使用"><a href="#sync同步文件的使用" class="headerlink" title="sync同步文件的使用"></a>sync同步文件的使用</h3><p><strong>基本用法</strong>:</p><ul><li>路径在左边：意味着将左边同步到右边</li><li>路径在右边：同理</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sync &lt;本地路径&gt; &lt;远程连接用户名&gt;@&lt;IP地址&gt;:&lt;远程路径&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意空格，路径写全不要用~</span></span><br></pre></td></tr></table></figure><p><strong>sync同步命令是一次性的，每次输入都很长，很麻烦，编写一个脚本来实现</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">树莓派目标目录</span></span><br><span class="line">REMOTE_DIR=/home/pi/pi_ws/src</span><br><span class="line"></span><br><span class="line">echo &quot;===============================&quot;</span><br><span class="line">echo &quot;  选择要同步的树莓派&quot;</span><br><span class="line">echo &quot;===============================&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示菜单</span></span><br><span class="line">index=1</span><br><span class="line">for name in &quot;$&#123;!PI_HOSTS[@]&#125;&quot;; do</span><br><span class="line">    echo &quot;$index. $name  ($&#123;PI_HOSTS[$name]&#125;)&quot;</span><br><span class="line">    names[$index]=$name</span><br><span class="line">    ((index++))</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用户输入编号</span></span><br><span class="line">read -p &quot;请输入编号 (1-$((index-1))): &quot; choice</span><br><span class="line"></span><br><span class="line">if [[ -z &quot;$&#123;names[$choice]&#125;&quot; ]]; then</span><br><span class="line">    echo &quot;无效的编号，退出。&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取选择的名称和IP</span></span><br><span class="line">SELECTED_NAME=$&#123;names[$choice]&#125;</span><br><span class="line">PI_HOST=$&#123;PI_HOSTS[$SELECTED_NAME]&#125;</span><br><span class="line"></span><br><span class="line">echo &quot;&quot;</span><br><span class="line">echo &quot;已选择: $SELECTED_NAME ($PI_HOST)&quot;</span><br><span class="line">echo &quot;    本地目录:  $LOCAL_DIR/&quot;</span><br><span class="line">echo &quot;    目标目录:  $PI_USER@$PI_HOST:$REMOTE_DIR/&quot;</span><br><span class="line">echo &quot;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">二次确认</span></span><br><span class="line">read -p &quot;确认执行同步吗？(y/n): &quot; confirm</span><br><span class="line">if [[ &quot;$confirm&quot; != &quot;y&quot; &amp;&amp; &quot;$confirm&quot; != &quot;Y&quot; ]]; then</span><br><span class="line">    echo &quot;已取消同步。&quot;</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查设备是否在线</span></span><br><span class="line">ping -c 1 -W 1 &quot;$PI_HOST&quot; &amp;&gt;/dev/null</span><br><span class="line">if [[ $? -ne 0 ]]; then</span><br><span class="line">    echo &quot;无法连接到 $PI_HOST，请检查网络。&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Rsync 同步</span></span><br><span class="line">rsync -avz --progress &quot;$&#123;LOCAL_DIR&#125;/&quot; &quot;$&#123;PI_USER&#125;@$&#123;PI_HOST&#125;:$&#123;REMOTE_DIR&#125;/&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;同步到 $SELECTED_NAME 完成&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--progress 命令可以中显示文件传输进度条，包括文件大小、已经传输的大小、传输速度和剩余时间</span></span><br></pre></td></tr></table></figure><ul><li>-a———&gt;保留文件属性并递归复制目录</li><li>-v———&gt;显示详细信息</li><li>-z———&gt;压缩数据，加快传输</li><li>–progress———&gt;显示每个文件传输进度</li></ul><h2 id="ROS与STM32间的通信"><a href="#ROS与STM32间的通信" class="headerlink" title="ROS与STM32间的通信"></a>ROS与STM32间的通信</h2><h3 id="完成hello-world"><a href="#完成hello-world" class="headerlink" title="完成hello world!"></a>完成hello world!</h3><p>首先，让STM32F407串口发送一个**”hello world!”**</p><p>linux下串口工具可以使用xTools：</p><p><img src="/assets/image-20251025165649697.png" alt="image-20251025165649697"></p><p>cutecom在我的环境下有显示的问题，不使用。</p><p>查询串口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /dev/tty*</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20251025170343631.png" alt="image-20251025170343631"></p><p><strong>可以通过插拔来查找usb串口通道</strong></p><p>linux系统下串口无法使用问题：</p><ul><li>没有安装usb转ttl的驱动导致问题</li><li>没有给予usb权限</li></ul><p>解决方法：</p><ul><li>去下载对应芯片的驱动（ch340&#x2F;ch9102）,linux自带了cp210x的驱动</li><li>使用chmod给对应串口通道施加权限，没有权限无法运行。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 &lt;设备通道&gt;</span><br><span class="line">eg:</span><br><span class="line">chmod 777 /dev/ttyUSB0</span><br></pre></td></tr></table></figure><p>ros串口发布节点：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;std_msgs/String.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;serial/serial.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">serial::Serial ser;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">serial_init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ser.<span class="built_in">setPort</span>(<span class="string">&quot;/dev/ttyUSB0&quot;</span>);<span class="comment">//串口名称</span></span><br><span class="line">    ser.<span class="built_in">setBaudrate</span>(<span class="number">115200</span>);<span class="comment">//波特率</span></span><br><span class="line">    serial::Timeout to =   serial::Timeout::<span class="built_in">simpleTimeout</span>(<span class="number">100</span>);<span class="comment">//等待时间</span></span><br><span class="line">    ser.<span class="built_in">setTimeout</span>(to);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ser.<span class="built_in">open</span>();<span class="comment">//打开串口</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span>(serial::IOException&amp; e)&#123;</span><br><span class="line">        <span class="built_in">ROS_ERROR_STREAM</span>(<span class="string">&quot;Unable to open port.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ser.<span class="built_in">isOpen</span>()) &#123;</span><br><span class="line">        <span class="built_in">ROS_INFO</span>(<span class="string">&quot;/dev/ttyCH341USB0 is open&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;/dev/ttyCH341USB0 open failed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ROS初始化</span></span><br><span class="line">    ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;stm32_Serial_test01&quot;</span>);</span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line">    <span class="comment">//创建ROS发布者节点</span></span><br><span class="line">    ros::Publisher stm32_pub = nh.<span class="built_in">advertise</span>&lt;std_msgs::String&gt;(<span class="string">&quot;stm32_data&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="comment">//串口相关配置</span></span><br><span class="line">    <span class="built_in">serial_init</span>();</span><br><span class="line">    <span class="function">ros::Rate <span class="title">loop_rate</span><span class="params">(<span class="number">10</span>)</span></span>;<span class="comment">//设置循环速率</span></span><br><span class="line">    <span class="keyword">while</span>(ros::<span class="built_in">ok</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取缓冲区内的字节数</span></span><br><span class="line">        <span class="type">size_t</span> n = ser.<span class="built_in">available</span>();</span><br><span class="line">        <span class="keyword">if</span> (n != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//定义一个缓冲区，将数据存放在此</span></span><br><span class="line">            <span class="type">uint8_t</span> buffer[<span class="number">1024</span>];</span><br><span class="line">            n = ser.<span class="built_in">read</span>(buffer, n);</span><br><span class="line"></span><br><span class="line">            <span class="function">std::string <span class="title">received_data</span><span class="params">(buffer, buffer + n)</span></span>;  <span class="comment">// 将字节转成字符串</span></span><br><span class="line">            <span class="built_in">ROS_INFO_STREAM</span>(<span class="string">&quot;Received data: &quot;</span> &lt;&lt; received_data);</span><br><span class="line">            <span class="comment">//将接受到的内容封装为ROS消息，并发布消息出去</span></span><br><span class="line">            std_msgs::String msg;</span><br><span class="line">            msg.data = received_data;</span><br><span class="line">            stm32_pub.<span class="built_in">publish</span>(msg);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (received_data.<span class="built_in">find</span>(<span class="string">&quot;hello world!&quot;</span>) != std::string::npos) &#123;</span><br><span class="line">                <span class="built_in">ROS_INFO</span>(<span class="string">&quot;STM32 sent: hello world!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ros::<span class="built_in">spinOnce</span>();</span><br><span class="line">        loop_rate.<span class="built_in">sleep</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ser.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置stm32串口发送到上位机后，开启此节点，可以看到成功接收。</p><h2 id="编写键盘输入节点实现键盘控制小车移动"><a href="#编写键盘输入节点实现键盘控制小车移动" class="headerlink" title="编写键盘输入节点实现键盘控制小车移动"></a>编写键盘输入节点实现键盘控制小车移动</h2><h3 id="键盘输入节点"><a href="#键盘输入节点" class="headerlink" title="键盘输入节点"></a>键盘输入节点</h3><p>核心是如何读取键盘输入，然后转换成数据发送话题出去</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ----------- 函数功能：从终端读取单个按键，不需要按回车 ----------- //</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">termios</span> oldt, newt;</span><br><span class="line">    <span class="type">int</span> ch;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前终端属性</span></span><br><span class="line">    <span class="built_in">tcgetattr</span>(STDIN_FILENO, &amp;oldt);</span><br><span class="line">    newt = oldt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭规范模式(ICANON)和回显(ECHO)，实现即时单字符读取</span></span><br><span class="line">    newt.c_lflag &amp;= ~(ICANON | ECHO);</span><br><span class="line">    <span class="built_in">tcsetattr</span>(STDIN_FILENO, TCSANOW, &amp;newt);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取单个字符</span></span><br><span class="line">    ch = <span class="built_in">getchar</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 恢复终端原设置</span></span><br><span class="line">    <span class="built_in">tcsetattr</span>(STDIN_FILENO, TCSANOW, &amp;oldt);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化 ROS 节点，节点名为 keyboard_ctrl_pub</span></span><br><span class="line">    ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;keyboard_control&quot;</span>);</span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 Publisher，发布主题为 /cmd_vel，消息类型为 geometry_msgs::Twist</span></span><br><span class="line">    ros::Publisher cmd_pub = nh.<span class="built_in">advertise</span>&lt;geometry_msgs::Twist&gt;(<span class="string">&quot;cmd_vel&quot;</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    geometry_msgs::Twist cmd;  <span class="comment">// 创建 Twist 消息对象</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\n=== 键盘控制说明 ===\n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;w: 前进 | s: 后退 | a: 左转 | d: 右转\n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;空格: 停止 | q: 退出程序\n&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;====================\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主循环：持续读取键盘按键</span></span><br><span class="line">    <span class="keyword">while</span> (ros::<span class="built_in">ok</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> c = <span class="built_in">getch</span>();  <span class="comment">// 获取键盘输入</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每次先清零速度</span></span><br><span class="line">        cmd.linear.x = <span class="number">0.0</span>;</span><br><span class="line">        cmd.angular.z = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按键控制逻辑</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;w&#x27;</span>) &#123;</span><br><span class="line">            cmd.linear.x = <span class="number">0.5</span>;     <span class="comment">// 前进，线速度为 0.5 m/s</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;s&#x27;</span>) &#123;</span><br><span class="line">            cmd.linear.x = <span class="number">-0.5</span>;    <span class="comment">// 后退</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">            cmd.angular.z = <span class="number">1.0</span>;    <span class="comment">// 左转，角速度正方向</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;d&#x27;</span>) &#123;</span><br><span class="line">            cmd.angular.z = <span class="number">-1.0</span>;   <span class="comment">// 右转，角速度负方向</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">            cmd.linear.x = <span class="number">0</span>;       <span class="comment">// 停止</span></span><br><span class="line">            cmd.angular.z = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;q&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 按 q 退出程序</span></span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;退出程序\n&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发布速度命令</span></span><br><span class="line">        cmd_pub.<span class="built_in">publish</span>(cmd);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印调试信息</span></span><br><span class="line">        <span class="built_in">ROS_INFO</span>(<span class="string">&quot;发布速度: linear=%.2f m/s, angular=%.2f rad/s&quot;</span>, cmd.linear.x, cmd.angular.z);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写了这个控制节点后，成功将数据利用话题的方式发布出去。</p><h3 id="通信节点"><a href="#通信节点" class="headerlink" title="通信节点"></a>通信节点</h3><p>前面写了键盘并且把</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
